<launch>

  <!-- Poor man's URDF -->
  <node name="base2camera" pkg="tf" type="static_transform_publisher" args="0 0 0.09 0 0 0 base_link camera_link 100" />
  <node name="map2base" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map base_link 100" />

  <!-- Launch RealSense camera nodes -->
  <include file="$(find realsense_camera)/launch/r200_nodelet_rgbd.launch" />

	<!-- Create a new nodelet manager if we need to split the work across cores -->
  <!-- <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" /> -->

  <!-- Run a VoxelGrid filter to clean NaNs, clip and downsample -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid camera/camera_nodelet_manager" output="screen">
    <remap from="~input" to="/camera/depth/points" />
    <rosparam>
      filter_field_name: y # Weird -- looks like /camera/depth/points has z and y flipped?
      filter_limit_min: -0.21 # And it's upside down?
      filter_limit_max: 0.09
      filter_limit_negative: False
      leaf_size: 0.05 # Downsample (huge speedup); 0.01 is fine, but slow
    </rosparam>
  </node>

  <!-- Run a RadiusOutlierRemoval filter to remove outliers -->
  <node pkg="nodelet" type="nodelet" name="radius_outlier_removal" args="load pcl/RadiusOutlierRemoval camera/camera_nodelet_manager" output="screen">
    <remap from="~input" to="/voxel_grid/output" />
    <rosparam>
      radius_search: 0.10
      min_neighbors: 5
    </rosparam>
  </node>

  <!-- Run a single costmap -->
  <node name="my_costmap" pkg="costmap_2d" type="costmap_2d_node" output="screen">
    <rosparam>
 
      costmap: #hardcoded name

        footprint: [[0.2, 0.2], [-0.2, 0.2], [-0.2, -0.2], [0.2, -0.2] ]
        #robot_radius: 0.20 TODO hmmm... I thought that I could have a round robot, but I get an error if I don't provide at least 3 pts
        global_frame: /map
        robot_base_frame: base_link
        update_frequency: 2.0 # How often we read sensors and update the map
        publish_frequency: 1.0 # How often we publish the map
        static_map: false
        rolling_window: true
        width: 10.0
        height: 10.0
        resolution: 0.05 #x,y resolution

        plugins:
          - {name: obstacles, type: "costmap_2d::ObstacleLayer"}
          #- {name: obstacles, type: "costmap_2d::VoxelLayer"}

        obstacles:
          max_obstacle_height: 0.3 #for all sensors
          z_resolution: 0.05
          z_voxels: 10
          z_unknown_threshold: 10
          mark_threshold: 0
          publish_voxel_map: true

          observation_sources: point_cloud_sensor
          point_cloud_sensor:
            sensor_frame: camera_link
            data_type: PointCloud2
            topic: /radius_outlier_removal/output
            marking: true
            clearing: true
            max_obstacle_height: 0.3 #clip above 30cm
            min_obstacle_height: 0.0
            obstacle_range: 2.1
            raytrace_range: 2.5

    </rosparam>
  </node>
</launch> 
